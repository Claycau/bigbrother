SPOT COMMANDS
#Build the jar file
ant jar-app

#Deploy jar to mote
ant jar-deploy

#Run the jar with terminal debugging
ant run

#Remove the manifest daemon flag.  Must be removed for mote code to run correctly due to changes in how yellow handles pre-loading of system handlers
ant delete-system-property -Dkey=spot.start.mainfest.daemons


Software
Read from sensors
-   Implement sensors in main program
  - Sense direction
  - Sense distance
-	Data transfer
-	Test wireless programming of motes
-	Create a transmit data command
-	Create a delete local data command
-	MD5 checksum
-	Create data transfer pipeline
-	(FUTURE) Check on mesh network, look into mote visualization and tasked sensing/data analysis

Hardware
- Test mote life per energy volume
  - Construct / acquire battery packs
  - Acquire / research enclosures

- Integrate onboard temperature and light sensors

- Sound intensity sensor integration

- Check on mesh network, look into mote visualization and tasked sensing/data analysis

^^^^^
|||||
Ideas


Documentation Locations:
- Light/temp sensor, 58
- Radio comm 61
- USB comm 83




Mote Lifetime:

- Initialize stuff
- Ask user to enter binary code for mote with button one, ok with button two
  - Show code in LEDs
- Turn off LEDs
- Main loop
  always run:
    - While button one is pressed show binary code on LEDs
    - If time/date is XXXX, state is Data transmission ########## maybe wait for ping here instead, if battery life allows
    - If time/date is XXXX + delta t, state is Normal operation
  states:
    - Normal operation
      -
    - Data transmission  ########## maybe flash an LED every few seconds while in this mode
      - Wait for ping from computer
      - Prepare data
        - Battery voltage
        - Mote binary code and static ID
        - Event data
      - Calculate MD5 hash of data before transmission
      - Send MD5 hash
      - Send data
      - Wait for computer response
      - If computer's MD5 does not match data's MD5, resend data
      - If does match, erase event data from mote
      - State is Normal transmission

        
        
        
Events and Data Storage:

Event Model (~10 bytes)
- timestamp : date/time
- sensor type : byte
- sensor data : int
